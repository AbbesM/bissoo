import pandas as pd
import numpy as np
import requests
import pandas_ta as ta  # مكتبة لحساب المؤشرات الفنية
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split

# تحميل البيانات الحية من Binance API
def get_data(symbol, interval='1h', limit=1000):
    url = f'https://api.binance.com/api/v1/klines?symbol={symbol}&interval={interval}&limit={limit}'
    data = requests.get(url).json()
    df = pd.DataFrame(data, columns=["time", "open", "high", "low", "close", "volume", "close_time", 
                                     "quote_asset_volume", "number_of_trades", 
                                     "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"])
    df['time'] = pd.to_datetime(df['time'], unit='ms')
    df['close'] = pd.to_numeric(df['close'])
    df['high'] = pd.to_numeric(df['high'])
    df['low'] = pd.to_numeric(df['low'])
    return df

# حساب المؤشرات الفنية (RSI, EMA, MACD)
def calculate_indicators(df):
    df['RSI'] = ta.rsi(df['close'], length=14)
    df['EMA'] = ta.ema(df['close'], length=14)
    macd = ta.macd(df['close'], fast=12, slow=26, signal=9)
    df['MACD'] = macd['MACD_12_26_9']
    df['MACD_signal'] = macd['MACDs_12_26_9']
    df['MACD_hist'] = macd['MACDh_12_26_9']
    return df

# تحميل البيانات ومعالجتها
def load_and_process_data(symbol):
    df = get_data(symbol)
    df = calculate_indicators(df)
    df = df.dropna()  # إزالة أي قيم مفقودة
    return df

# تقسيم البيانات إلى تدريب واختبار
def split_data(df):
    X = df[['RSI', 'EMA', 'MACD', 'close']]
    y = np.where(df['RSI'] < 30, 1, 0)  # هدف: 1 = شراء, 0 = بيع (مثال بسيط)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

# بناء النموذج
def build_model():
    model = Sequential([
        Dense(64, input_dim=4, activation='relu'),
        Dropout(0.2),
        Dense(128, activation='relu'),
        Dropout(0.2),
        Dense(64, activation='relu'),
        Dense(1, activation='sigmoid')  # طبقة الإخراج (0 أو 1)
    ])
    model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])
    return model

# تدريب النموذج
def train_model(X_train, y_train, X_test, y_test):
    model = build_model()
    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test), verbose=2)
    return model

# حفظ النموذج
def save_model(model):
    model.save('your_model.keras')  # حفظ النموذج بصيغة Keras الحديثة
    print("تم حفظ النموذج في 'your_model.keras'")

# تحسين النموذج واختباره
def improve_and_test_model(symbol):
    # تحميل البيانات ومعالجتها
    df = load_and_process_data(symbol)

    # تقسيم البيانات
    X_train, X_test, y_train, y_test = split_data(df)

    # تدريب النموذج
    model = train_model(X_train, y_train, X_test, y_test)

    # اختبار النموذج
    loss, accuracy = model.evaluate(X_test, y_test)
    print(f"دقة النموذج على بيانات الاختبار: {accuracy * 100:.2f}%")

    # حفظ النموذج المحسن
    save_model(model)

# تشغيل عملية تحسين النموذج
if __name__ == "__main__":
    symbol = "BTCUSDT"  # قم بتغيير الرمز إلى الرمز الذي ترغب في تحليل بياناته (مثل BTCUSDT)
    improve_and_test_model(symbol)
